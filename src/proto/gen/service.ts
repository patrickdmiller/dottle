// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.28.0
// source: service.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import _m0 from "protobufjs/minimal";

export interface TestRequest {
  id: string;
  message: string;
}

export interface TestResponse {
  message: string;
}

function createBaseTestRequest(): TestRequest {
  return { id: "", message: "" };
}

export const TestRequest = {
  encode(message: TestRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TestRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTestRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TestRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: TestRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TestRequest>, I>>(base?: I): TestRequest {
    return TestRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TestRequest>, I>>(object: I): TestRequest {
    const message = createBaseTestRequest();
    message.id = object.id ?? "";
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseTestResponse(): TestResponse {
  return { message: "" };
}

export const TestResponse = {
  encode(message: TestResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TestResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTestResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TestResponse {
    return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
  },

  toJSON(message: TestResponse): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TestResponse>, I>>(base?: I): TestResponse {
    return TestResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TestResponse>, I>>(object: I): TestResponse {
    const message = createBaseTestResponse();
    message.message = object.message ?? "";
    return message;
  },
};

export type CoordinatorService = typeof CoordinatorService;
export const CoordinatorService = {
  test: {
    path: "/dottle.Coordinator/Test",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: TestRequest) => Buffer.from(TestRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => TestRequest.decode(value),
    responseSerialize: (value: TestResponse) => Buffer.from(TestResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => TestResponse.decode(value),
  },
} as const;

export interface CoordinatorServer extends UntypedServiceImplementation {
  test: handleUnaryCall<TestRequest, TestResponse>;
}

export interface CoordinatorClient extends Client {
  test(request: TestRequest, callback: (error: ServiceError | null, response: TestResponse) => void): ClientUnaryCall;
  test(
    request: TestRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: TestResponse) => void,
  ): ClientUnaryCall;
  test(
    request: TestRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: TestResponse) => void,
  ): ClientUnaryCall;
}

export const CoordinatorClient = makeGenericClientConstructor(CoordinatorService, "dottle.Coordinator") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): CoordinatorClient;
  service: typeof CoordinatorService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
