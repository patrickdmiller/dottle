// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.28.0
// source: dot.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Timestamp } from "./google/protobuf/timestamp";

export interface Dot {
  id: string;
  created?: Date | undefined;
  priority: number;
  container?: Container | undefined;
  jobInfo?: JobInfo | undefined;
}

export interface Container {
  uri: string;
  command: string;
  parameters: Parameter[];
}

export interface Parameter {
  key: string;
  stringValue?: string | undefined;
  intValue?: number | undefined;
}

export interface JobInfo {
  status: JobInfo_Status;
  updated?: Date | undefined;
}

export enum JobInfo_Status {
  UNSET = 0,
  QUEUED = 1,
  PULLED = 2,
  PROCESSING = 3,
  FINISHED = 4,
  ERROR = 5,
  UNRECOGNIZED = -1,
}

export function jobInfo_StatusFromJSON(object: any): JobInfo_Status {
  switch (object) {
    case 0:
    case "UNSET":
      return JobInfo_Status.UNSET;
    case 1:
    case "QUEUED":
      return JobInfo_Status.QUEUED;
    case 2:
    case "PULLED":
      return JobInfo_Status.PULLED;
    case 3:
    case "PROCESSING":
      return JobInfo_Status.PROCESSING;
    case 4:
    case "FINISHED":
      return JobInfo_Status.FINISHED;
    case 5:
    case "ERROR":
      return JobInfo_Status.ERROR;
    case -1:
    case "UNRECOGNIZED":
    default:
      return JobInfo_Status.UNRECOGNIZED;
  }
}

export function jobInfo_StatusToJSON(object: JobInfo_Status): string {
  switch (object) {
    case JobInfo_Status.UNSET:
      return "UNSET";
    case JobInfo_Status.QUEUED:
      return "QUEUED";
    case JobInfo_Status.PULLED:
      return "PULLED";
    case JobInfo_Status.PROCESSING:
      return "PROCESSING";
    case JobInfo_Status.FINISHED:
      return "FINISHED";
    case JobInfo_Status.ERROR:
      return "ERROR";
    case JobInfo_Status.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseDot(): Dot {
  return { id: "", created: undefined, priority: 0, container: undefined, jobInfo: undefined };
}

export const Dot = {
  encode(message: Dot, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.created !== undefined) {
      Timestamp.encode(toTimestamp(message.created), writer.uint32(18).fork()).ldelim();
    }
    if (message.priority !== 0) {
      writer.uint32(24).int32(message.priority);
    }
    if (message.container !== undefined) {
      Container.encode(message.container, writer.uint32(34).fork()).ldelim();
    }
    if (message.jobInfo !== undefined) {
      JobInfo.encode(message.jobInfo, writer.uint32(42).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Dot {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDot();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.created = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.priority = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.container = Container.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.jobInfo = JobInfo.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Dot {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      created: isSet(object.created) ? fromJsonTimestamp(object.created) : undefined,
      priority: isSet(object.priority) ? globalThis.Number(object.priority) : 0,
      container: isSet(object.container) ? Container.fromJSON(object.container) : undefined,
      jobInfo: isSet(object.jobInfo) ? JobInfo.fromJSON(object.jobInfo) : undefined,
    };
  },

  toJSON(message: Dot): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.created !== undefined) {
      obj.created = message.created.toISOString();
    }
    if (message.priority !== 0) {
      obj.priority = Math.round(message.priority);
    }
    if (message.container !== undefined) {
      obj.container = Container.toJSON(message.container);
    }
    if (message.jobInfo !== undefined) {
      obj.jobInfo = JobInfo.toJSON(message.jobInfo);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Dot>, I>>(base?: I): Dot {
    return Dot.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Dot>, I>>(object: I): Dot {
    const message = createBaseDot();
    message.id = object.id ?? "";
    message.created = object.created ?? undefined;
    message.priority = object.priority ?? 0;
    message.container = (object.container !== undefined && object.container !== null)
      ? Container.fromPartial(object.container)
      : undefined;
    message.jobInfo = (object.jobInfo !== undefined && object.jobInfo !== null)
      ? JobInfo.fromPartial(object.jobInfo)
      : undefined;
    return message;
  },
};

function createBaseContainer(): Container {
  return { uri: "", command: "", parameters: [] };
}

export const Container = {
  encode(message: Container, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.uri !== "") {
      writer.uint32(10).string(message.uri);
    }
    if (message.command !== "") {
      writer.uint32(18).string(message.command);
    }
    for (const v of message.parameters) {
      Parameter.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Container {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseContainer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.uri = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.command = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.parameters.push(Parameter.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Container {
    return {
      uri: isSet(object.uri) ? globalThis.String(object.uri) : "",
      command: isSet(object.command) ? globalThis.String(object.command) : "",
      parameters: globalThis.Array.isArray(object?.parameters)
        ? object.parameters.map((e: any) => Parameter.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Container): unknown {
    const obj: any = {};
    if (message.uri !== "") {
      obj.uri = message.uri;
    }
    if (message.command !== "") {
      obj.command = message.command;
    }
    if (message.parameters?.length) {
      obj.parameters = message.parameters.map((e) => Parameter.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Container>, I>>(base?: I): Container {
    return Container.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Container>, I>>(object: I): Container {
    const message = createBaseContainer();
    message.uri = object.uri ?? "";
    message.command = object.command ?? "";
    message.parameters = object.parameters?.map((e) => Parameter.fromPartial(e)) || [];
    return message;
  },
};

function createBaseParameter(): Parameter {
  return { key: "", stringValue: undefined, intValue: undefined };
}

export const Parameter = {
  encode(message: Parameter, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.stringValue !== undefined) {
      writer.uint32(18).string(message.stringValue);
    }
    if (message.intValue !== undefined) {
      writer.uint32(24).int64(message.intValue);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Parameter {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParameter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.stringValue = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.intValue = longToNumber(reader.int64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Parameter {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      stringValue: isSet(object.stringValue) ? globalThis.String(object.stringValue) : undefined,
      intValue: isSet(object.intValue) ? globalThis.Number(object.intValue) : undefined,
    };
  },

  toJSON(message: Parameter): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.stringValue !== undefined) {
      obj.stringValue = message.stringValue;
    }
    if (message.intValue !== undefined) {
      obj.intValue = Math.round(message.intValue);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Parameter>, I>>(base?: I): Parameter {
    return Parameter.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Parameter>, I>>(object: I): Parameter {
    const message = createBaseParameter();
    message.key = object.key ?? "";
    message.stringValue = object.stringValue ?? undefined;
    message.intValue = object.intValue ?? undefined;
    return message;
  },
};

function createBaseJobInfo(): JobInfo {
  return { status: 0, updated: undefined };
}

export const JobInfo = {
  encode(message: JobInfo, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.status !== 0) {
      writer.uint32(16).int32(message.status);
    }
    if (message.updated !== undefined) {
      Timestamp.encode(toTimestamp(message.updated), writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): JobInfo {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJobInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 16) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.updated = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): JobInfo {
    return {
      status: isSet(object.status) ? jobInfo_StatusFromJSON(object.status) : 0,
      updated: isSet(object.updated) ? fromJsonTimestamp(object.updated) : undefined,
    };
  },

  toJSON(message: JobInfo): unknown {
    const obj: any = {};
    if (message.status !== 0) {
      obj.status = jobInfo_StatusToJSON(message.status);
    }
    if (message.updated !== undefined) {
      obj.updated = message.updated.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<JobInfo>, I>>(base?: I): JobInfo {
    return JobInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<JobInfo>, I>>(object: I): JobInfo {
    const message = createBaseJobInfo();
    message.status = object.status ?? 0;
    message.updated = object.updated ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(long: Long): number {
  if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (long.lt(globalThis.Number.MIN_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
