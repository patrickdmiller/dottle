// @generated by protobuf-ts 2.9.4 with parameter server_grpc1,client_grpc1
// @generated from protobuf file "dottle.proto" (package "dottle", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Dot } from "./dot";
import { Timestamp } from "./google/protobuf/timestamp";
/**
 * @generated from protobuf message dottle.Dottle
 */
export interface Dottle {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created = 3;
     */
    created?: Timestamp;
    /**
     * @generated from protobuf field: repeated dottle.Dot dots = 4;
     */
    dots: Dot[];
    /**
     * @generated from protobuf field: int32 priority = 5;
     */
    priority: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class Dottle$Type extends MessageType<Dottle> {
    constructor() {
        super("dottle.Dottle", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "created", kind: "message", T: () => Timestamp },
            { no: 4, name: "dots", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Dot },
            { no: 5, name: "priority", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<Dottle>): Dottle {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.name = "";
        message.dots = [];
        message.priority = 0;
        if (value !== undefined)
            reflectionMergePartial<Dottle>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Dottle): Dottle {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* google.protobuf.Timestamp created */ 3:
                    message.created = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.created);
                    break;
                case /* repeated dottle.Dot dots */ 4:
                    message.dots.push(Dot.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int32 priority */ 5:
                    message.priority = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Dottle, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* google.protobuf.Timestamp created = 3; */
        if (message.created)
            Timestamp.internalBinaryWrite(message.created, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated dottle.Dot dots = 4; */
        for (let i = 0; i < message.dots.length; i++)
            Dot.internalBinaryWrite(message.dots[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* int32 priority = 5; */
        if (message.priority !== 0)
            writer.tag(5, WireType.Varint).int32(message.priority);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dottle.Dottle
 */
export const Dottle = new Dottle$Type();
